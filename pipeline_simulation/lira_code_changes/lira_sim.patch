diff --git a/global-config.txt b/global-config.txt
index 08c7471..e598100 100644
--- a/global-config.txt
+++ b/global-config.txt
@@ -2,16 +2,16 @@
 #Values are noted as "<KEY>	<VALUE>"
 
 #Path to snpEff installation
-SNPEFF	/n/data1/hms/dbmi/park/cbohrson/installed/local/bin/snpEff
+SNPEFF	/media/box2/Experiments/Joanna/bin/miniconda3/envs/LiRA/share/snpsift-4.3.1t-1/
 
 #Path to DBSNP database
-DBSNP	/n/data1/hms/dbmi/park/cbohrson/common_all_20160601.vcf.gz
+DBSNP	/media/box2/Experiments/Joanna/LiRA/ref_data/common_all_20180423.vcf.gz
 
 #Path to downloaded 1000 genomes haplotype reference panel
-KGEN	/n/data1/hms/dbmi/park/simon_chu/projects/data/1000G
+KGEN	/media/box2/Experiments/Joanna/LiRA/ref_data/1000G
 
 #Path to picard JAR file
-PICARD	/n/data1/hms/dbmi/park/cbohrson/installed/local/bin/picard.jar
+PICARD	/media/box2/Experiments/Joanna/bin/miniconda3/pkgs/picard-2.7.1-py27_2/share/picard-2.7.1-2/picard.jar
 
 #Gap between SNPs required for regions to be chunked separately
 GAP_REQUIREMENT	2000
@@ -32,7 +32,7 @@ CONTROL_METHOD	germline
 MAX_DISTANCE_10X	50000
 
 #Script in $LIRA_DIR/scripts to use for parallelization
-PARALLEL_SCRIPT	slurm.R
+PARALLEL_SCRIPT	serial.R
 
 #Number of sampling replicates to use for CONTROL_METHOD
 BOOTSTRAP_REPLICATES	100
diff --git a/scripts/functions.R b/scripts/functions.R
index cb055fa..2e4261e 100644
--- a/scripts/functions.R
+++ b/scripts/functions.R
@@ -10,7 +10,7 @@ setup <- function(config) {
   } else if(file.exists(index.possibility.2)) {
     res <- out.log.cmd(paste("ln -s ",index.possibility.2," reads.bam.bai",sep=""))
   } else {
-    stop("Cannot find bam index.")
+    stop(sprintf("Cannot find bam index: %s or %s",index.possibility.1, index.possibility.2))
   }
   
   #soft link vcf
@@ -65,10 +65,21 @@ annotate.and.phase.vcf <- function(chromosome) {
                     " | grep -e '#' -e '0/0' -e '0/1' -e '1/0' -e '1/1'",
                     ifelse(hg19.convert," | sed 's#^#chr#g'",""),
                     " >> phasing-input.vcf",sep=""))
+  ########## MODIFIED! - check if phasing-input.vcf has any content, if empty, create empty files and continue to next step.
+  nInput <- as.numeric(system('grep -cv "^#" phasing-input.vcf', intern = TRUE))
+  print(sprintf("input %d",nInput))
+  if (nInput <= 1){
+    out.log("OBS! No input sites - creating empty files.")
+    out.log.cmd("touch phasing-output.vcf")
+    out.log.cmd("touch phasing-output.vcf.gz")
+    out.log.cmd("touch no_input_data.chk")
+    return()
+  }
+
   if(config$phasing_software == "shapeit") {
-    tmp <- paste("[.]chr",gsub("chr","",chromosome),"[.]",sep="")
+    tmp <- paste("[._]chr",gsub("chr","",chromosome),"[._]",sep="")
     if(chromosome == "X") {
-      tmp <- ".chrX_(non|NON)PAR."
+      tmp <- "[._]chrX_(non|NON)PAR."
       sex <- data.frame(sample=config$sample,sex=ifelse(config$gender == "male",1,2))
       write.table(x = sex,file = "sex.ped",quote = F,sep = "\t",row.names = F,col.names = F)
       add.args <- "--chrX --input-sex sex.ped"
@@ -86,6 +97,9 @@ annotate.and.phase.vcf <- function(chromosome) {
                       " --input-ref ",hap," ",legend," ",sample,
                       " --output-log shapeit-check.log",sep=""))
     out.log("Run shapeit")
+    if (!file.exists("shapeit-check.snp.strand.exclude")){
+       system("touch shapeit-check.snp.strand.exclude")
+    }
     out.log.cmd(paste("shapeit -V phasing-input.vcf -M ",map,
                       " --input-ref ",hap," ",legend," ",sample,
                       " --exclude-snp shapeit-check.snp.strand.exclude -O phasing-output ",add.args,
@@ -93,6 +107,8 @@ annotate.and.phase.vcf <- function(chromosome) {
     if(hg19.convert) {
       out.log("Reformat phased vcf")
       out.log.cmd("sed -i 's#^chr##g' phasing-output.vcf && bgzip phasing-output.vcf && tabix -f phasing-output.vcf.gz")
+    }else{
+      out.log.cmd("bgzip phasing-output.vcf && tabix -f phasing-output.vcf.gz")	
     }
   } else if(config$phasing_software == "eagle") {
     out.log("Run eagle")
@@ -163,7 +179,8 @@ local.region.function <- function(config,work.dir) {
   
   wrapper <- function() {
     out.log(paste("Getting pileup by read (output: ",work.dir,"/sites.by.read.txt)",sep=""))
-    out <- out.log.cmd(paste("$LIRA_DIR/scripts/linkage.py --bam ",config$analysis_path,"/reads.bam --fasta ",config$reference_file," --bed sites.bed > sites.by.read.txt",sep=""))
+    out <- out.log.cmd(paste("python $LIRA_DIR/scripts/linkage.py --bam ",config$analysis_path,"/reads.bam --fasta ",config$reference," --bed sites.bed > sites.by.read.txt",sep=""))
+
     
     if(as.numeric(system(paste("wc -l sites.by.read.txt | tr ' ' '\t' | cut -f 1",sep=""),intern=T)) == 0) {
       linkage <- data.frame(RR=numeric(0),RV=numeric(0),VR=numeric(0),VV=numeric(0))
@@ -272,7 +289,7 @@ local.region.function <- function(config,work.dir) {
   get_alt_counts <- function() {
     cmd <- paste(c(paste("bcftools query -i 'TYPE=\"snp\" & N_ALT=1' -R targets -f '",c("%CHROM\\t%POS","%CHROM;%POS;%REF;%ALT"),"\\n' ",config$vcf," 2> /dev/null ",c(" | awk '{print $1\"\\t\"$2-1\"\\t\"$2}' > .tmp1"," > .tmp2"),sep="",collapse=" && "),
                    "echo \"id\tA\tC\tG\tT\" > alt-counts.txt",
-                   paste("$LIRA_DIR/scripts/bulk_check.py --bam ",config$bam," --bed .tmp1 > .tmp3",sep=""),
+                   paste("python $LIRA_DIR/scripts/bulk_check.py --bam ",config$bam," --bed .tmp1 > .tmp3",sep=""),
                    "paste .tmp2 .tmp3 >> alt-counts.txt",
                    "rm .tmp1",
                    "rm .tmp2",
@@ -407,6 +424,15 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
       }
     }
     linkage <- do.call(rbind,lapply(paste(jobs.dir,"/",j,"/linkage.rda",sep=""),function(x){load(x); return(linkage)}))
+    print("Linkage")
+    print(dim(linkage))
+    ### MODIFIED: check if any data in linkage
+    if (nrow(linkage) == 0) {
+       obj$linkage <- NULL
+       obj$vcf.info <- NULL
+       return(obj)
+    }
+
     linkage$site1 <- gsub("([^~]*)~([^~]*)","\\1",rownames(linkage))
     linkage$site2 <- gsub("([^~]*)~([^~]*)","\\2",rownames(linkage))
     linkage$pair_id <- rownames(linkage)
@@ -414,6 +440,7 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
     pos1 <- as.numeric(gsub("([^;]*);([^;]*);([^;]*);([^;]*)","\\2",linkage$site1))
     pos2 <- as.numeric(gsub("([^;]*);([^;]*);([^;]*);([^;]*)","\\2",linkage$site2))
     linkage <- linkage[order(pos1,pos2),]
+
     rownames(linkage) <- 1:nrow(linkage)
     obj$linkage <- linkage
     
@@ -425,22 +452,67 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   
   #Load single cell info
   out.log("Loading single cell info")
+  print("Loading single cell info")  
   obj <- process.local(config,paste("Jobs still undone from plink.  See ",config$analysis_path,"/",chromosome,"/compare/log.txt",sep=""))
   single.cell.linkage <- obj$linkage
   save(single.cell.linkage,file="single.cell.linkage.rda")
   
   single.cell.vcf.info <- obj$vcf.info
   save(single.cell.vcf.info,file="single.cell.vcf.info.rda")
-
+  print("single-cell linkage:")
+  print(dim(single.cell.linkage))
+  print("single-cell vcf:")
+  print(dim(single.cell.vcf.info))
+  
   #Load bulk info
   out.log("Loading bulk info")
   obj <- process.local(bulk.config,paste("Bulk jobs still undone from plink.  See ",config$analysis_path,"/",chromosome,"/compare/log.txt",sep=""))
   bulk.linkage <- obj$linkage
   save(bulk.linkage,file="bulk.linkage.rda")
- 
   bulk.vcf.info <- obj$vcf.info
   save(bulk.vcf.info,file="bulk.vcf.info.rda")
-  
+
+  print("bulk linkage:")
+  print(dim(bulk.linkage))
+  print("bulk vcf:")
+  print(dim(bulk.vcf.info))
+
+  # MODIFIED! - if no sites found - will get error in code below!!
+  # create mock ppower scripts
+  # create mock output file
+  if (is.null(bulk.linkage) | is.null(single.cell.linkage) ){
+     print(sprintf("OBS! No linkage found for chr %s in %s",chromosome, getwd()))
+     summary = NULL
+     save(summary,file=paste("summary.",bulk.config$name,".rda",sep=""))
+
+     # make mock ppower scripts
+     jobs.dir <- paste(config$analysis_path,"/",chromosome,"/jobs",sep="")
+     jobs <- list.files(jobs.dir)
+     job.dir <- paste(config$analysis_path,"/power.",bulk.config$name,"_job_scripts/",sep="")
+     suppressWarnings(dir.create(job.dir))
+     for(i in seq_along(jobs)) {
+           lines <- c("#!/bin/bash",paste("touch ", config$analysis_path, "/progress/.power_",bulk.config$name,"_",chromosome,"_",i, sep=''), paste("touch ", config$analysis_path, "/", chromosome, "/jobs/", i, "/powers.two.bulk.bed", sep=""), paste("touch ", config$analysis_path, "/", chromosome, "/jobs/", i, "/powers.bulk.no_data", sep=""))
+           #print(lines)
+           jscript = paste(job.dir, chromosome, "_", i,".sh",sep='')
+           print(jscript)
+           writeLines(lines,con=jscript)
+           system(paste("chmod +x ",jscript,sep=""))
+     }
+     return(0)
+  }
+
+
+
+  # MODIFICATION - borrow phasing info fromo bulk data to single cell data:
+  bulk.only <- which(! bulk.linkage$pair_id %in% single.cell.linkage$pair_id)
+  #print(length(bulk.only))
+
+  single.cell.linkage <- rbind(bulk.linkage[bulk.only ,],single.cell.linkage)
+  single.cell.linkage <- single.cell.linkage[order(single.cell.linkage$site1),]
+  save(single.cell.linkage,file="single.cell.linkage.rda")
+
+  print(sprintf("sc.linkage after borrowing: %d", nrow(single.cell.linkage)))
+
   #make a site-specific table
   site.frame <- single.cell.vcf.info
   site.frame$id <- bulk.vcf.info$id
@@ -459,9 +531,15 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   site.frame$in.linkage <- rownames(site.frame) %in% c(single.cell.linkage$site1,single.cell.linkage$site2)
   site.frame$onek.bulk.het <- (site.frame$pop.ref.freq != 1) & (site.frame$bulk.gt == "0/1")
   site.frame$somatic <- (site.frame$bulk.gt == "0/0")|(site.frame$bulk.gt == "./.")
-  
+  print("site.frame")
+  print(head(site.frame))
+
   onek.bulk.sites <- rownames(site.frame)[site.frame$onek.bulk.het]
   somatic.sites <- rownames(site.frame)[site.frame$somatic]
+  print(sprintf("onek : %d",length(onek.bulk.sites)))
+  print(sprintf("somatic : %d",length(somatic.sites)))
+  print(sprintf("in.linkage : %d",sum(site.frame$in.linkage)))
+
   single.cell.linkage <- single.cell.linkage[((single.cell.linkage$site1 %in% c(onek.bulk.sites,somatic.sites))&(single.cell.linkage$site2 %in% c(onek.bulk.sites,somatic.sites))),]
   
   single.cell.linkage <- single.cell.linkage[single.cell.linkage$pair_id %in% bulk.linkage$pair_id,]
@@ -481,6 +559,13 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   ind2[is.na(ind2)] <- F
   bulk.linkage$phased.orientation[ind2] <- "trans"
   
+  print("Bulk_linkage:")
+  print(dim(bulk.linkage))
+  print(table(bulk.linkage$phased.orientation))
+
+  print("sc_linkage:")
+  print(dim(single.cell.linkage))
+
   haplotype.parser <- function(ind, type, site, orientation, hc.bulk.function, hc.single.cell.function, dc.single.cell.function,flag.functions=NULL) {
     bulk.tmp <- bulk.linkage[ind,]
     single.cell.tmp <- single.cell.linkage[ind,]
@@ -502,13 +587,43 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
     }
     return(info)
   }
-  
+
   #onek.bulk to onek.bulk
+  # find pairs of sites that both are het in bulk and linked in bulk.linkage.
   tmp <- site.frame[bulk.linkage$site1,"onek.bulk.het"] & site.frame[bulk.linkage$site2,"onek.bulk.het"]
   site.frame$bulk.onek.bulk.linked <- F
   site.frame$bulk.onek.bulk.linked[rownames(site.frame) %in% c(bulk.linkage$site1[tmp],bulk.linkage$site2[tmp])] <- T
+
+  print("TMP")
+  print(length(tmp))  
+  print(sum(tmp))
+
+  # MODIFIED! - if no sites found - will get error in code below!!
+  # create mock ppower scripts
+  # create mock output file
+  if (sum(tmp) == 0 ){
+     print(sprintf("OBS! No sites found for chr %s in %s",chromosome, getwd()))
+     summary = NULL
+     save(summary,file=paste("summary.",bulk.config$name,".rda",sep=""))
+
+     # make mock ppower scripts 
+     jobs.dir <- paste(config$analysis_path,"/",chromosome,"/jobs",sep="")
+     jobs <- list.files(jobs.dir)
+     job.dir <- paste(config$analysis_path,"/power.",bulk.config$name,"_job_scripts/",sep="")
+     suppressWarnings(dir.create(job.dir))
+     for(i in seq_along(jobs)) {
+     	   lines <- c("#!/bin/bash",paste("touch ", config$analysis_path, "/progress/.power_",bulk.config$name,"_",chromosome,"_",i, sep=''), paste("touch ", config$analysis_path, "/", chromosome, "/jobs/", i, "/powers.two.bulk.bed", sep=""), paste("touch ", config$analysis_path, "/", chromosome, "/jobs/", i, "/powers.bulk.no_data", sep=""))
+	   #print(lines)
+	   jscript = paste(job.dir, chromosome, "_", i,".sh",sep='')
+	   print(jscript)
+     	   writeLines(lines,con=jscript)
+     	   system(paste("chmod +x ",jscript,sep=""))
+     }
+     return(0)
+  }
+
+
   flag.functions <- list()
-  
   #trans, site 1
   flag.functions[["bad_bulk_haplotypes"]] <- function(b,s) {(b$RR != 0) | (b$VV != 0)}
   flag.functions[["sc_dropout"]] <- function(b,s){s$VR == 0}
@@ -563,7 +678,9 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   
   #site 1 somatic, site 2 onek.bulk
   tmp <- (site.frame[single.cell.linkage$site1,"somatic"]) & (site.frame[single.cell.linkage$site2,"onek.bulk.het"]) & with(bulk.linkage,(VR == 0) & (VV == 0))
-  
+
+  print(  sprintf("Somatic site1 : %s",sum(tmp)))
+
   #trans
   somatic.site1.trans.info <- haplotype.parser(ind=with(single.cell.linkage,VR > VV) & tmp,
                                                type="somatic",
@@ -583,7 +700,8 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   
   #site 1 onek.bulk, site2 somatic
   tmp <- (site.frame[single.cell.linkage$site1,"onek.bulk.het"]) & (site.frame[single.cell.linkage$site2,"somatic"]) & with(bulk.linkage,(RV == 0) & (VV == 0))
-  
+  print(  sprintf("Somatic site2 : %s",sum(tmp)))
+
   #trans
   somatic.site2.trans.info <- haplotype.parser(ind=with(single.cell.linkage,RV > VV) & tmp,
                                                type="somatic",
@@ -602,7 +720,8 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
                                              dc.single.cell.function=function(b,s){s$VR})
   #site 1 mosaic, site 2 onek.bulk
   tmp <- !(site.frame[single.cell.linkage$site1,"onek.bulk.het"]) & (site.frame[single.cell.linkage$site2,"onek.bulk.het"])
-  
+  print(  sprintf("Mosaic site1 : %s",sum(tmp)))
+
   #trans
   mosaic.site1.trans.info <- haplotype.parser(ind=with(single.cell.linkage,VR > VV) & with(bulk.linkage,(VR > VV) & (RR > VR) & (RV > VR)) & tmp,
                                               type="mosaic",
@@ -622,7 +741,8 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   
   #site 2 mosaic, site 1 onek.bulk
   tmp <- (site.frame[single.cell.linkage$site1,"onek.bulk.het"]) & !(site.frame[single.cell.linkage$site2,"onek.bulk.het"])
-  
+  print(  sprintf("Mosaic site2 : %s",sum(tmp)))
+
   #trans
   mosaic.site2.trans.info <- haplotype.parser(ind=with(single.cell.linkage,RV > VV) & with(bulk.linkage,(RV > VV) & (RR > RV) & (VR > RV)) & tmp,
                                               type="mosaic",
@@ -648,7 +768,7 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   save(combined.mosaic,file=paste("combined.mosaic.",bulk.config$name,".rda",sep=""))
   site.frame$somatic.proper <- rownames(site.frame) %in% combined.somatic$site
   site.frame$mosaic.proper <- rownames(site.frame) %in% combined.mosaic$site
-  
+
   process.data <- function(data) {
     data$distance <- site.frame[data$site,"pos"] - site.frame[data$to,"pos"]
     data$stat <- data$hc.bulk
@@ -684,6 +804,8 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
   
   data <- rbind(combined.onek,combined.somatic)
   rownames(data) <- paste(data$site,data$to)
+  print("Data combined :")
+  print(dim(data))
   save(data,file=paste("data.",bulk.config$name,".rda",sep=""))
   obj <- process.data(data)
   
@@ -702,7 +824,10 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
     site.frame[,c] <- NA
     site.frame[obj.mosaic$mosaic.site,c] <- obj.mosaic[,c]
   }
-  
+
+  print("bulk.vcf.info")
+  print(head(bulk.vcf.info))
+
   #get pileup depths
   tmp <- bulk.vcf.info[,c("raw_count_A","raw_count_C","raw_count_G","raw_count_T")]
   names(tmp) <- c("A","C","G","T")
@@ -712,6 +837,7 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
     site.frame[ind,"bulk.alt.count"] <- site.frame[ind,"bulk.alt.count"] + tmp[ind,alt]
   }
   
+
   mutations <- site.frame
   save(mutations,file=paste("mutations.",bulk.config$name,".rda",sep=""))
   
@@ -750,7 +876,6 @@ compare <- function(config, bulk.config, chromosome, overwrite, wait) {
     writeLines(lines,con=js[i])
     system(paste("chmod +x ",js[i],sep=""))
   }
-  
   out.log.cmd(paste("touch progress/.compare_",chromosome,sep=""))
 }
 
@@ -1024,7 +1149,6 @@ varcall <- function(config,bulk.config,overwrite) {
     out.log.cmd(paste("rm -r ",dir," 2> /dev/null",sep=""))
   }
   chromosomes <- get.chromosomes(config)
-  
   done <- unlist(lapply(chromosomes,function(chromosome){
     tmp <- paste(chromosome,"_",list.files(paste(config$analysis_path,"/",chromosome,"/jobs",sep="")),sep="")
     done <- file.exists(paste(config$analysis_path,"/progress/.power_",bulk.config$name,"_",tmp,sep=""))
@@ -1037,6 +1161,21 @@ varcall <- function(config,bulk.config,overwrite) {
     sapply(names(done)[!done],function(x){out.log(x)})
     stop("Jobs not done from ppower")
   }
+
+  # also check if empty output from one of the comare jobs per chromosome!
+  # skip that chromosome!
+  skip.chrom <- c()
+  for (chr in chromosomes){
+      chkfile <- paste(config$analysis_path, "/",chr, "/jobs/1/powers.bulk.no_data",sep='')
+      if (file.exists(chkfile)){
+      	 skip.chrom <- c(skip.chrom, chr)
+      }
+  }
+  chromosomes <- setdiff(chromosomes, skip.chrom)
+  
+  print("Chromosomes:")
+  print(chromosomes)
+
   suppressWarnings(dir.create(dir))
   setwd(dir)
   
@@ -1106,7 +1245,13 @@ varcall <- function(config,bulk.config,overwrite) {
   powers.mod <- powers.mod * overall.rate.observed
   powers.mod[powers.mod == 0] <- 1
   save(powers.mod,file="powers.mod.rda")
-  
+
+  print("candidate.somatic")
+  print(dim(candidate.somatic))
+  print(head(candidate.somatic[is.na(candidate.somatic$stat),]))
+  print(candidate.somatic$stat)
+
+
   tmp <- seq(from=2,by=1,to=max(candidate.somatic$stat))
   vec <- rep(1,length(tmp))
   names(vec) <- tmp
@@ -1123,10 +1268,15 @@ varcall <- function(config,bulk.config,overwrite) {
   thresh <- 2
   candidate.somatic <- candidate.somatic[candidate.somatic$stat >= thresh,]
   onek <- onek[onek$stat >= thresh,]
+  print(head(onek))
   local <- function(mut,som) {
     mut <- base::split(mut,mut$distance)
     distances <- table(som$distance)
     new <- list()
+### MODIFIED; changed target to lower multiple of distances than 4 (original)
+### Note! using target <- distances * 2 works, but maybe better to
+###       increase gSNVs in sc reads data in simulations, revert to 4 for now
+#    target <- distances * 2
     target <- distances * 4
     for(n in names(distances)) {
       if(!(n %in% names(mut))) {
@@ -1146,10 +1296,23 @@ varcall <- function(config,bulk.config,overwrite) {
       }
     }
     correct <- names(new)[sapply(new,nrow) < target]
+    #print("target")
+    #print(target)
+    #print("sapply(new,nrow)")
+    #print(sapply(new,nrow))
+    #print("correct")
+    #print(correct)
+    #print(names(mut))
     for(n in correct) {
-      while(nrow(new[[n]]) < target[n]) {
+      #print(sprintf("n: %s - target %d",n,target[n]))
+      while(nrow(new[[n]]) < target[n] & length(mut) > 0) {  ### MODIFIED! Added in &length(mut) > 0 
+        #print(sprintf("mut: %s - n: %s",paste(names(mut), collapse= ";"),n))      			  
         tmp <- as.numeric(names(mut)) - as.numeric(n)
+	#print("tmp")
+	#print(tmp)
         add <- names(mut)[tmp == min(tmp)]
+	#print("add")
+	#print(add)
         if(length(add) > 1) {
           piece <- do.call(rbind,mut[[add]])
         } else {
@@ -1157,6 +1320,12 @@ varcall <- function(config,bulk.config,overwrite) {
         }
         new[[n]] <- rbind(new[[n]],piece)
         mut <- mut[-which(names(mut) %in% add)]
+	#print("after")
+	#print("names(mut)")
+	#print(names(mut))
+	#print(nrow(new[[n]]))
+	#print("target[n]")
+	#print(target[n])
       }
     }
     for(i in 1:global$BOOTSTRAP_REPLICATES) {
@@ -1168,6 +1337,12 @@ varcall <- function(config,bulk.config,overwrite) {
       save(booty,file=paste(i,".",thresh,".rda",sep=""))
     }
   }
+  #print("onek")
+  #print(head(onek))
+#print(dim(onek))
+#print("cand")
+#print(head(candidate.somatic))
+#print(dim(candidate.somatic))
   dumb <- local(onek,candidate.somatic)
   m <- max(candidate.somatic$stat)
   bootstrap <- colMeans(do.call(rbind,lapply(1:global$BOOTSTRAP_REPLICATES,function(x){load(paste(x,".",thresh,".rda",sep="")); return((table(c(booty$stat,2:m)) - 1)[as.character(2:m)])})))
@@ -1693,4 +1868,4 @@ joint.subset <- function(config,bulk.config,work.dir) {
   ssnvs$cell <- config$name
   rownames(ssnvs) <- NULL
   save(ssnvs,file=paste(config$name,".rda",sep=""))
-}
\ No newline at end of file
+}
diff --git a/scripts/main.R b/scripts/main.R
index 0277082..5901432 100644
--- a/scripts/main.R
+++ b/scripts/main.R
@@ -134,6 +134,8 @@ if(cmd == "plink") {
   if(tot > 0) {
     res <- job.loop(batches,names(batches))
   }
+  done.file <- "plink_done"
+  file.create(done.file)	
 }
 
 if(cmd == "local_region_function") {
@@ -326,4 +328,4 @@ if(!(cmd %in% c("null_command","joint"))) {
 
 if(cmd != "null_command") {
   setwd(owd)
-}
\ No newline at end of file
+}
diff --git a/scripts/serial.R b/scripts/serial.R
index d1d0c35..b5cc585 100644
--- a/scripts/serial.R
+++ b/scripts/serial.R
@@ -13,6 +13,7 @@ check.jobs <- function(job.names) {
 #Given a vector of bash commands and corresponding job IDs (in the slurm case, names), this should submit jobs and return TRUE if the submission was successful, FALSE otherwise.
 submit.jobs <- function(bash.commands, job.ids) {
   for(b in bash.commands) {
+    print(b)
     system(b)
   }
   return(T)
diff --git a/scripts/utils.R b/scripts/utils.R
index 480a81b..127d72d 100644
--- a/scripts/utils.R
+++ b/scripts/utils.R
@@ -75,16 +75,19 @@ read.config <- function(config.path) {
   }
 }
 
+# OBS! Modified to skip chr19
+
 get.chromosomes <- function(config) {
   if(config$reference_identifier %in% c("GRCh37","hg38")) {
-    chromosomes <- paste("chr",1:22,sep="")
+    sel.chr <- c(1:18,20:22)
+    chromosomes <- as.character(sel.chr)
     if(config$gender == "female") {
-      chromosomes <- c(chromosomes,"chrX")
+      chromosomes <- c(chromosomes,"X")
     }
   } else if(config$reference_identifier == "hg19") {
-    chromosomes <- as.character(1:22)
+    chromosomes <- paste("chr",sel.chr,sep="")
     if(config$gender == "female") {
-      chromosomes <- c(chromosomes,"X")
+      chromosomes <- c(chromosomes,"chrX")
     }
   } else {
     stop("Cannot get chromosomes.")
@@ -176,4 +179,4 @@ combine.objects <- function(in.list) {
     }
     return(vec)
   }
-}
\ No newline at end of file
+}
